" Vim Config

syntax on

" {{{ Basic vim config
set nocp
set hidden
set number

if version >= 703
    set colorcolumn=120
endif

set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
" }}}

" {{{ Vundle Init
filetype off " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" }}}
"
Plugin 'VundleVim/Vundle.vim'
Plugin 'tmux-plugins/vim-tmux'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tpope/vim-sensible'
Plugin 'altercation/vim-colors-solarized'
Plugin 'jamessan/vim-gnupg'
"Plugin 'kien/ctrlp.vim'
Plugin 'ctrlpvim/ctrlp.vim'
"Plugin 'rking/ag.vim'
"Plugin 'jremmen/vim-ripgrep'
Plugin 'dyng/ctrlsf.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'justinmk/vim-sneak'
Plugin 'tpope/vim-dispatch'
"Plugin 'racer-rust/vim-racer'
Plugin 'vim-scripts/DoxyGen-Syntax'
Plugin 'purescript-contrib/purescript-vim'
Plugin 'junegunn/vim-easy-align'

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'whiteinge/diffconflicts'

Plugin 'justmao945/vim-clang'
Plugin 'w0rp/ale'
" Plugin 'lepture/vim-jinja'
Plugin 'Glench/Vim-Jinja2-Syntax'
Plugin 'arrufat/vala.vim'
Plugin 'dag/vim-fish'
Plugin 'cstrahan/vim-capnp'
Plugin 'lambdatoast/elm.vim'
Plugin 'vmchale/dhall-vim'
Plugin 'martinda/Jenkinsfile-vim-syntax'
Plugin 'sheerun/vim-polyglot'
Plugin 'gsiano/vmux-clipboard'
Plugin 'neoclide/coc.nvim', {'pinned': 1}

let g:sneak#label = 1

"let g:syntastic_debug = 2

set statusline+=%#warningmsg#

"if exists("SyntasticStatuslineFlag")
"  set statusline+=%{SyntasticStatuslineFlag()}
"endif

set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 1
"
"let g:syntastic_c_checkers = ['clang_tidy']
"let g:syntastic_cpp_checkers = ['clang_tidy']

"let g:syntastic_c_clang_tidy_exec = '/Users/jason/dev/scripts/clang-tidy'
"let g:syntastic_cpp_clang_tidy_exec = '/Users/jason/dev/scripts/clang-tidy'

" {{{ Vundle finalization
call vundle#end()
filetype plugin indent on
filetype on
" }}}

let g:ale_python_auto_pipenv = 1

" {{{ CtrlP config
let g:ctrlp_cmd = 'CtrlPBuffer'
let g:ctrlp_working_path_mode = 'ra'
"let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files --exclude-standard -co']
let g:ctrlp_max_files = 0

let g:ctrlp_prompt_mappings = {
	\ 'ToggleType(1)':      ['<c-b>', '<c-down>'],
	\ 'ToggleType(-1)':       ['<c-f>', '<c-up>'],
	\ }

" }}}

" {{{ TMux navigation support

" let g:tmux_navigator_no_mappings = 1

" nnoremap <silent> <c-a>h :TmuxNavigateLeft<cr>
" nnoremap <silent> <c-a>j :TmuxNavigateDown<cr>
" nnoremap <silent> <c-a>k :TmuxNavigateUp<cr>
" nnoremap <silent> <c-a>l :TmuxNavigateRight<cr>
" nnoremap <silent> <c-a>\ :TmuxNavigatePrevious<cr>

" }}}


" {{{ Color config
let g:solarized_termtrans=1
try
  colorscheme solarized
catch /^Vim\%((\a\+)\)\=:E185/
  colorscheme default
endtry

if empty($BACKGROUND)
    set background=dark
else
    let envvimbg=$BACKGROUND
    let &background=envvimbg
endif
" }}}

let mapleader = "\<Space>"

set clipboard=unnamed,unnamedplus " Use system clipboard by default

set laststatus=2 " always display the status line
set cursorline
set showmatch
set hlsearch

nnoremap <silent> <Leader>x :bp\|bd #<CR>

noremap <Leader>n :NERDTreeToggle<CR>
nnoremap <Leader>n :NERDTreeToggle<CR>

noremap <Leader>y :only<CR>
nnoremap <Leader>y :only<CR>

noremap <Leader>o :CtrlPBuffer<CR>
nnoremap <Leader>o :CtrlPBuffer<CR>

noremap <Leader>m :Make<CR>
nnoremap <Leader>m :Make<CR>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Mouse support
set mouse+=a

"set iskeyword-=_

if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

"let g:racer_experimental_completer = 1
"let g:racer_cmd = "~/.cargo/bin/racer"

nnoremap <silent> <Leader>jr :redraw!<CR>

set et
set ts=2
set sts=2
set sw=2
set ai

set completeopt+=longest,menuone

autocmd FileType c setlocal cindent et
autocmd FileType cpp setlocal cindent et

set exrc
set secure

set wildmode=longest,list,full
set completeopt=longest,menu,menuone,preview,noinsert,noselect

let g:clang_auto = 0

"let g:ale_python_flake8_executable = 'python3'
"let g:ale_python_flake8_options = '-m flake8 --max-line-length=120'

" Equivalent to the above.
let g:ale_linters = {'python': ['pylint']}

let g:ale_python_pylint_change_directory = 0

set undodir=$HOME/.vim/undo//
set undofile

set directory^=$HOME/.vim/swap//

nmap <Leader>ff <Plug>CtrlSFPrompt
map <silent> <Leader>ft :CtrlSFToggle<cr>
map <silent> <Leader>fo :CtrlSFFocus<cr>

let g:ctrlsf_auto_focus = {
    \ "at": "done",
    \ "duration_less_than": 1000
    \ }

map <silent> <leader>y :WriteToVmuxClipboard<cr>
map <silent> <leader>p :ReadFromVmuxClipboard<cr>

" COC Settings

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

inoremap <silent><expr> <c-space> coc#refresh()

" gd - go to definition of word under cursor
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)

" gi - go to implementation
nmap <silent> gi <Plug>(coc-implementation)

" gr - find references
nmap <silent> gr <Plug>(coc-references)

" gh - get hint on whatever's under the cursor
nnoremap <silent> K :call <SID>show_documentation()<CR>
nnoremap <silent> gh :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

nnoremap <silent> <leader>co  :<C-u>CocList outline<cr>
nnoremap <silent> <leader>cs  :<C-u>CocList -I symbols<cr>

" List errors
nnoremap <silent> <leader>cl  :<C-u>CocList locationlist<cr>

" list commands available in tsserver (and others)
nnoremap <silent> <leader>cc  :<C-u>CocList commands<cr>

" restart when tsserver gets wonky
nnoremap <silent> <leader>cR  :<C-u>CocRestart<CR>

" view all errors
nnoremap <silent> <leader>cl  :<C-u>CocList locationlist<CR>

" manage extensions
nnoremap <silent> <leader>cx  :<C-u>CocList extensions<cr>

" rename the current word in the cursor
nmap <leader>cr  <Plug>(coc-rename)
nmap <leader>cf  <Plug>(coc-format-selected)
vmap <leader>cf  <Plug>(coc-format-selected)

" run code actions
vmap <leader>ca  <Plug>(coc-codeaction-selected)
nmap <leader>ca  <Plug>(coc-codeaction-selected)

let g:NERDTreeIgnore = ['\~$', '__pycache__']

map <C-a> <Nop>
